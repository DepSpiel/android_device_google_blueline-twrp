!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/shuxiangfan/device_b1c1_twrp/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
AB_FLAG_OFFSET	gpt-utils/gpt-utils.h	/^#define AB_FLAG_OFFSET /;"	d
AB_OTA_UPDATER	BoardConfig.mk	/^AB_OTA_UPDATER := true$/;"	m
AB_PARTITION_ATTR_BOOT_SUCCESSFUL	gpt-utils/gpt-utils.h	/^#define AB_PARTITION_ATTR_BOOT_SUCCESSFUL /;"	d
AB_PARTITION_ATTR_SLOT_ACTIVE	gpt-utils/gpt-utils.h	/^#define AB_PARTITION_ATTR_SLOT_ACTIVE /;"	d
AB_PARTITION_ATTR_UNBOOTABLE	gpt-utils/gpt-utils.h	/^#define AB_PARTITION_ATTR_UNBOOTABLE /;"	d
AB_PTN_LIST	gpt-utils/gpt-utils.h	/^#define AB_PTN_LIST /;"	d
AB_SLOT_ACTIVE	gpt-utils/gpt-utils.h	/^#define AB_SLOT_ACTIVE /;"	d
AB_SLOT_ACTIVE_VAL	gpt-utils/gpt-utils.h	/^#define AB_SLOT_ACTIVE_VAL /;"	d
AB_SLOT_A_SUFFIX	gpt-utils/gpt-utils.h	/^#define AB_SLOT_A_SUFFIX /;"	d
AB_SLOT_B_SUFFIX	gpt-utils/gpt-utils.h	/^#define AB_SLOT_B_SUFFIX /;"	d
AB_SLOT_INACTIVE	gpt-utils/gpt-utils.h	/^#define AB_SLOT_INACTIVE /;"	d
AB_SLOT_INACTIVE_VAL	gpt-utils/gpt-utils.h	/^#define AB_SLOT_INACTIVE_VAL /;"	d
ALLOW_MISSING_DEPENDENCIES	BoardConfig.mk	/^ALLOW_MISSING_DEPENDENCIES := true$/;"	m
ARRAY_SIZE	gpt-utils/gpt-utils.h	/^#define ARRAY_SIZE(/;"	d
ATTRIBUTE_FLAG_OFFSET	gpt-utils/gpt-utils.h	/^#define ATTRIBUTE_FLAG_OFFSET /;"	d
BACKUP_BOOT	gpt-utils/gpt-utils.h	/^	BACKUP_BOOT$/;"	e	enum:boot_chain
BACKUP_HEADER_OFFSET	gpt-utils/gpt-utils.h	/^#define BACKUP_HEADER_OFFSET /;"	d
BAK_PTN_NAME_EXT	gpt-utils/gpt-utils.cpp	/^#define BAK_PTN_NAME_EXT /;"	d	file:
BLK_DEV_FILE	gpt-utils/gpt-utils.cpp	/^#define BLK_DEV_FILE /;"	d	file:
BOARD_BOOTIMAGE_PARTITION_SIZE	BoardConfig.mk	/^BOARD_BOOTIMAGE_PARTITION_SIZE := 0x04000000$/;"	m
BOARD_BOOTIMG_HEADER_VERSION	BoardConfig.mk	/^BOARD_BOOTIMG_HEADER_VERSION := 2$/;"	m
BOARD_BUILD_SYSTEM_ROOT_IMAGE	BoardConfig.mk	/^BOARD_BUILD_SYSTEM_ROOT_IMAGE := true$/;"	m
BOARD_FLASH_BLOCK_SIZE	BoardConfig.mk	/^BOARD_FLASH_BLOCK_SIZE := 262144 # (BOARD_KERNEL_PAGESIZE * 64)$/;"	m
BOARD_HAS_LARGE_FILESYSTEM	BoardConfig.mk	/^BOARD_HAS_LARGE_FILESYSTEM := true$/;"	m
BOARD_HAS_NO_REAL_SDCARD	BoardConfig.mk	/^BOARD_HAS_NO_REAL_SDCARD := true$/;"	m
BOARD_KERNEL_BASE	BoardConfig.mk	/^BOARD_KERNEL_BASE := 0x00000000$/;"	m
BOARD_KERNEL_CMDLINE	BoardConfig.mk	/^BOARD_KERNEL_CMDLINE := console=ttyMSM0,115200n8 androidboot.console=ttyMSM0 printk.devkmsg=on m/;"	m
BOARD_KERNEL_IMAGE_NAME	BoardConfig.mk	/^BOARD_KERNEL_IMAGE_NAME := Image.gz$/;"	m
BOARD_KERNEL_PAGESIZE	BoardConfig.mk	/^BOARD_KERNEL_PAGESIZE := 4096$/;"	m
BOARD_KERNEL_TAGS_OFFSET	BoardConfig.mk	/^BOARD_KERNEL_TAGS_OFFSET := 0x00000100$/;"	m
BOARD_PROVIDES_GPTUTILS	BoardConfig.mk	/^BOARD_PROVIDES_GPTUTILS := true$/;"	m
BOARD_RAMDISK_OFFSET	BoardConfig.mk	/^BOARD_RAMDISK_OFFSET := 0x01000000$/;"	m
BOARD_SUPPRESS_SECURE_ERASE	BoardConfig.mk	/^BOARD_SUPPRESS_SECURE_ERASE := true$/;"	m
BOARD_SYSTEMIMAGE_PARTITION_TYPE	BoardConfig.mk	/^BOARD_SYSTEMIMAGE_PARTITION_TYPE := ext4$/;"	m
BOARD_USERDATAIMAGE_FILE_SYSTEM_TYPE	BoardConfig.mk	/^BOARD_USERDATAIMAGE_FILE_SYSTEM_TYPE := ext4$/;"	m
BOARD_USES_RECOVERY_AS_BOOT	BoardConfig.mk	/^BOARD_USES_RECOVERY_AS_BOOT := true$/;"	m
BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE	BoardConfig.mk	/^BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE := ext4$/;"	m
BOOT_DEV_DIR	gpt-utils/gpt-utils.h	/^#define BOOT_DEV_DIR /;"	d
BOOT_LUN_A_ID	gpt-utils/gpt-utils.cpp	/^#define BOOT_LUN_A_ID /;"	d	file:
BOOT_LUN_B_ID	gpt-utils/gpt-utils.cpp	/^#define BOOT_LUN_B_ID /;"	d	file:
DEVICE_PATH	BoardConfig.mk	/^DEVICE_PATH := device\/google\/blueline$/;"	m
FIRST_LBA_OFFSET	gpt-utils/gpt-utils.h	/^#define FIRST_LBA_OFFSET /;"	d
FIRST_USABLE_LBA_OFFSET	gpt-utils/gpt-utils.h	/^#define FIRST_USABLE_LBA_OFFSET /;"	d
GET_4_BYTES	gpt-utils/gpt-utils.cpp	/^#define GET_4_BYTES(/;"	d	file:
GET_8_BYTES	gpt-utils/gpt-utils.cpp	/^#define GET_8_BYTES(/;"	d	file:
GPT_BAD_CRC	gpt-utils/gpt-utils.cpp	/^    GPT_BAD_CRC$/;"	e	enum:gpt_state	file:
GPT_BAD_SIGNATURE	gpt-utils/gpt-utils.cpp	/^    GPT_BAD_SIGNATURE,$/;"	e	enum:gpt_state	file:
GPT_DISK_INIT_MAGIC	gpt-utils/gpt-utils.h	/^#define GPT_DISK_INIT_MAGIC /;"	d
GPT_OK	gpt-utils/gpt-utils.cpp	/^    GPT_OK = 0,$/;"	e	enum:gpt_state	file:
GPT_SIGNATURE	gpt-utils/gpt-utils.h	/^#define GPT_SIGNATURE /;"	d
HEADER_CRC_OFFSET	gpt-utils/gpt-utils.h	/^#define HEADER_CRC_OFFSET /;"	d
HEADER_SIZE_OFFSET	gpt-utils/gpt-utils.h	/^#define HEADER_SIZE_OFFSET /;"	d
LAST_LBA_OFFSET	gpt-utils/gpt-utils.h	/^#define LAST_LBA_OFFSET /;"	d
LAST_USABLE_LBA_OFFSET	gpt-utils/gpt-utils.h	/^#define LAST_USABLE_LBA_OFFSET /;"	d
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	device.mk	/^LOCAL_PATH := device\/google\/blueline$/;"	m
LOG_TAG	gpt-utils/gpt-utils.cpp	/^#define LOG_TAG /;"	d	file:
LUN_NAME_START_LOC	gpt-utils/gpt-utils.cpp	/^#define LUN_NAME_START_LOC /;"	d	file:
MAX_GPT_NAME_SIZE	gpt-utils/gpt-utils.h	/^#define MAX_GPT_NAME_SIZE /;"	d
MAX_LUNS	gpt-utils/gpt-utils.cpp	/^#define MAX_LUNS /;"	d	file:
NORMAL_BOOT	gpt-utils/gpt-utils.h	/^	NORMAL_BOOT = 0,$/;"	e	enum:boot_chain
PARTITION_COUNT_OFFSET	gpt-utils/gpt-utils.h	/^#define PARTITION_COUNT_OFFSET /;"	d
PARTITION_CRC_OFFSET	gpt-utils/gpt-utils.h	/^#define PARTITION_CRC_OFFSET /;"	d
PARTITION_NAME_OFFSET	gpt-utils/gpt-utils.h	/^#define PARTITION_NAME_OFFSET /;"	d
PATH_TRUNCATE_LOC	gpt-utils/gpt-utils.cpp	/^#define PATH_TRUNCATE_LOC /;"	d	file:
PENTRIES_OFFSET	gpt-utils/gpt-utils.h	/^#define PENTRIES_OFFSET /;"	d
PENTRY_SIZE_OFFSET	gpt-utils/gpt-utils.h	/^#define PENTRY_SIZE_OFFSET /;"	d
PLATFORM_SECURITY_PATCH	BoardConfig.mk	/^PLATFORM_SECURITY_PATCH := 2099-12-31$/;"	m
PLATFORM_VERSION	BoardConfig.mk	/^PLATFORM_VERSION := 16.1.0$/;"	m
PRIMARY_GPT	gpt-utils/gpt-utils.h	/^	PRIMARY_GPT = 0,$/;"	e	enum:gpt_instance
PRIMARY_HEADER_OFFSET	gpt-utils/gpt-utils.h	/^#define PRIMARY_HEADER_OFFSET /;"	d
PRODUCT_BRAND	twrp_blueline.mk	/^PRODUCT_BRAND := google$/;"	m
PRODUCT_DEVICE	twrp_blueline.mk	/^PRODUCT_DEVICE := blueline$/;"	m
PRODUCT_MAKEFILES	AndroidProducts.mk	/^PRODUCT_MAKEFILES := \\$/;"	m
PRODUCT_MANUFACTURER	twrp_blueline.mk	/^PRODUCT_MANUFACTURER := google$/;"	m
PRODUCT_MODEL	twrp_blueline.mk	/^PRODUCT_MODEL := Pixel 3$/;"	m
PRODUCT_NAME	twrp_blueline.mk	/^PRODUCT_NAME := twrp_blueline$/;"	m
PRODUCT_PACKAGES	device.mk	/^PRODUCT_PACKAGES := \\$/;"	m
PRODUCT_RELEASE_NAME	twrp_blueline.mk	/^PRODUCT_RELEASE_NAME := google Pixel 3/;"	m
PTN_ENTRY_SIZE	gpt-utils/gpt-utils.h	/^#define PTN_ENTRY_SIZE /;"	d
PTN_SWAP_LIST	gpt-utils/gpt-utils.h	/^#define PTN_SWAP_LIST /;"	d
PTN_XBL	gpt-utils/gpt-utils.h	/^#define PTN_XBL /;"	d
PUT_4_BYTES	gpt-utils/gpt-utils.cpp	/^#define PUT_4_BYTES(/;"	d	file:
RECOVERY_SDCARD_ON_DATA	BoardConfig.mk	/^RECOVERY_SDCARD_ON_DATA := true$/;"	m
SECONDARY_GPT	gpt-utils/gpt-utils.h	/^	SECONDARY_GPT$/;"	e	enum:gpt_instance
TARGET_2ND_ARCH	BoardConfig.mk	/^TARGET_2ND_ARCH := arm$/;"	m
TARGET_2ND_ARCH_VARIANT	BoardConfig.mk	/^TARGET_2ND_ARCH_VARIANT := armv7-a-neon$/;"	m
TARGET_2ND_CPU_ABI	BoardConfig.mk	/^TARGET_2ND_CPU_ABI := armeabi-v7a$/;"	m
TARGET_2ND_CPU_ABI2	BoardConfig.mk	/^TARGET_2ND_CPU_ABI2 := armeabi$/;"	m
TARGET_2ND_CPU_VARIANT	BoardConfig.mk	/^TARGET_2ND_CPU_VARIANT := generic$/;"	m
TARGET_ARCH	BoardConfig.mk	/^TARGET_ARCH := arm64$/;"	m
TARGET_ARCH_VARIANT	BoardConfig.mk	/^TARGET_ARCH_VARIANT := armv8-a$/;"	m
TARGET_BOARD_PLATFORM	BoardConfig.mk	/^TARGET_BOARD_PLATFORM := sdm845$/;"	m
TARGET_BOARD_SUFFIX	BoardConfig.mk	/^TARGET_BOARD_SUFFIX := _64$/;"	m
TARGET_COPY_OUT_VENDOR	BoardConfig.mk	/^TARGET_COPY_OUT_VENDOR := vendor$/;"	m
TARGET_CPU_ABI	BoardConfig.mk	/^TARGET_CPU_ABI := arm64-v8a$/;"	m
TARGET_CPU_ABI2	BoardConfig.mk	/^TARGET_CPU_ABI2 :=$/;"	m
TARGET_CPU_VARIANT	BoardConfig.mk	/^TARGET_CPU_VARIANT := generic$/;"	m
TARGET_CRYPTFS_HW_PATH	BoardConfig.mk	/^TARGET_CRYPTFS_HW_PATH := vendor\/qcom\/opensource\/cryptfs_hw $/;"	m
TARGET_HW_DISK_ENCRYPTION	BoardConfig.mk	/^TARGET_HW_DISK_ENCRYPTION := true$/;"	m
TARGET_KERNEL_ARCH	BoardConfig.mk	/^TARGET_KERNEL_ARCH := arm64$/;"	m
TARGET_KERNEL_CONFIG	BoardConfig.mk	/^TARGET_KERNEL_CONFIG := blueline_defconfig$/;"	m
TARGET_KERNEL_HEADER_ARCH	BoardConfig.mk	/^TARGET_KERNEL_HEADER_ARCH := arm64$/;"	m
TARGET_KERNEL_SOURCE	BoardConfig.mk	/^TARGET_KERNEL_SOURCE := kernel\/google\/blueline$/;"	m
TARGET_OTA_ASSERT_DEVICE	BoardConfig.mk	/^TARGET_OTA_ASSERT_DEVICE := blueline$/;"	m
TARGET_PREBUILT_DTB	BoardConfig.mk	/^TARGET_PREBUILT_DTB := $(DEVICE_PATH)\/prebuilt\/dtb.img$/;"	m
TARGET_PREBUILT_KERNEL	BoardConfig.mk	/^TARGET_PREBUILT_KERNEL := $(DEVICE_PATH)\/prebuilt\/Image.gz$/;"	m
TARGET_RECOVERY_PIXEL_FORMAT	BoardConfig.mk	/^TARGET_RECOVERY_PIXEL_FORMAT := RGBX_8888$/;"	m
TARGET_RECOVERY_QCOM_RTC_FIX	BoardConfig.mk	/^TARGET_RECOVERY_QCOM_RTC_FIX := true$/;"	m
TARGET_USERIMAGES_USE_EXT4	BoardConfig.mk	/^TARGET_USERIMAGES_USE_EXT4 := true$/;"	m
TARGET_USERIMAGES_USE_F2FS	BoardConfig.mk	/^TARGET_USERIMAGES_USE_F2FS := true$/;"	m
TARGET_USES_64_BIT_BINDER	BoardConfig.mk	/^TARGET_USES_64_BIT_BINDER := true$/;"	m
TARGET_USES_LOGD	BoardConfig.mk	/^TARGET_USES_LOGD := true$/;"	m
TWRP_INCLUDE_LOGCAT	BoardConfig.mk	/^TWRP_INCLUDE_LOGCAT := true$/;"	m
TW_DEFAULT_BRIGHTNESS	BoardConfig.mk	/^TW_DEFAULT_BRIGHTNESS := "80"$/;"	m
TW_EXCLUDE_DEFAULT_USB_INIT	BoardConfig.mk	/^TW_EXCLUDE_DEFAULT_USB_INIT := true$/;"	m
TW_EXTRA_LANGUAGES	BoardConfig.mk	/^TW_EXTRA_LANGUAGES := true$/;"	m
TW_IGNORE_MISC_WIPE_DATA	BoardConfig.mk	/^TW_IGNORE_MISC_WIPE_DATA := true$/;"	m
TW_INCLUDE_CRYPTO	BoardConfig.mk	/^TW_INCLUDE_CRYPTO := true$/;"	m
TW_INCLUDE_REPACKTOOLS	BoardConfig.mk	/^TW_INCLUDE_REPACKTOOLS := true$/;"	m
TW_INPUT_BLACKLIST	BoardConfig.mk	/^TW_INPUT_BLACKLIST := "hbtp_vm"$/;"	m
TW_NO_HAPTICS	BoardConfig.mk	/^TW_NO_HAPTICS := true$/;"	m
TW_SCREEN_BLANK_ON_BOOT	BoardConfig.mk	/^TW_SCREEN_BLANK_ON_BOOT := true$/;"	m
TW_THEME	BoardConfig.mk	/^TW_THEME := portrait_hdpi$/;"	m
TW_USE_TOOLBOX	BoardConfig.mk	/^TW_USE_TOOLBOX := true$/;"	m
TYPE_GUID_OFFSET	gpt-utils/gpt-utils.h	/^#define TYPE_GUID_OFFSET /;"	d
TYPE_GUID_SIZE	gpt-utils/gpt-utils.h	/^#define TYPE_GUID_SIZE /;"	d
UFS_ATTR_DATA_SIZE	gpt-utils/gpt-utils.cpp	/^#define UFS_ATTR_DATA_SIZE /;"	d	file:
UNIQUE_GUID_OFFSET	gpt-utils/gpt-utils.h	/^#define UNIQUE_GUID_OFFSET /;"	d
UPDATE_BACKUP	gpt-utils/gpt-utils.h	/^	UPDATE_BACKUP,$/;"	e	enum:boot_update_stage
UPDATE_FINALIZE	gpt-utils/gpt-utils.h	/^	UPDATE_FINALIZE$/;"	e	enum:boot_update_stage
UPDATE_MAIN	gpt-utils/gpt-utils.h	/^	UPDATE_MAIN = 1,$/;"	e	enum:boot_update_stage
VENDOR_SECURITY_PATCH	BoardConfig.mk	/^VENDOR_SECURITY_PATCH := 2099-12-31$/;"	m
XBL_AB_PRIMARY	gpt-utils/gpt-utils.cpp	/^#define XBL_AB_PRIMARY /;"	d	file:
XBL_AB_SECONDARY	gpt-utils/gpt-utils.cpp	/^#define XBL_AB_SECONDARY /;"	d	file:
XBL_BACKUP	gpt-utils/gpt-utils.cpp	/^#define XBL_BACKUP /;"	d	file:
XBL_PRIMARY	gpt-utils/gpt-utils.cpp	/^#define XBL_PRIMARY /;"	d	file:
_LARGEFILE64_SOURCE	gpt-utils/gpt-utils.cpp	/^#define _LARGEFILE64_SOURCE /;"	d	file:
__GPT_UTILS_H__	gpt-utils/gpt-utils.h	/^#define __GPT_UTILS_H__$/;"	d
add_lun_to_update_list	gpt-utils/gpt-utils.cpp	/^int add_lun_to_update_list(char *lun_path, struct update_data *dat)$/;"	f	typeref:typename:int
blk_rw	gpt-utils/gpt-utils.cpp	/^static int blk_rw(int fd, int rw, int64_t offset, uint8_t *buf, unsigned len)$/;"	f	typeref:typename:int	file:
block_size	gpt-utils/gpt-utils.h	/^	uint32_t block_size;$/;"	m	struct:gpt_disk	typeref:typename:uint32_t
boot_chain	gpt-utils/gpt-utils.h	/^enum boot_chain {$/;"	g
boot_update_stage	gpt-utils/gpt-utils.h	/^enum boot_update_stage {$/;"	g
devpath	gpt-utils/gpt-utils.h	/^	char devpath[PATH_MAX];$/;"	m	struct:gpt_disk	typeref:typename:char[]
get_dev_path_from_partition_name	gpt-utils/gpt-utils.cpp	/^static int get_dev_path_from_partition_name(const char *partname,$/;"	f	typeref:typename:int	file:
get_scsi_node_from_bootdevice	gpt-utils/gpt-utils.cpp	/^int get_scsi_node_from_bootdevice(const char *bootdev_path,$/;"	f	typeref:typename:int
gpt2_set_boot_chain	gpt-utils/gpt-utils.cpp	/^static int gpt2_set_boot_chain(int fd, enum boot_chain boot)$/;"	f	typeref:typename:int	file:
gpt_boot_chain_swap	gpt-utils/gpt-utils.cpp	/^static int gpt_boot_chain_swap(const uint8_t *pentries_start,$/;"	f	typeref:typename:int	file:
gpt_disk	gpt-utils/gpt-utils.h	/^struct gpt_disk {$/;"	s
gpt_disk_alloc	gpt-utils/gpt-utils.cpp	/^struct gpt_disk * gpt_disk_alloc()$/;"	f	typeref:struct:gpt_disk *
gpt_disk_commit	gpt-utils/gpt-utils.cpp	/^int gpt_disk_commit(struct gpt_disk *disk)$/;"	f	typeref:typename:int
gpt_disk_free	gpt-utils/gpt-utils.cpp	/^void gpt_disk_free(struct gpt_disk *disk)$/;"	f	typeref:typename:void
gpt_disk_get_disk_info	gpt-utils/gpt-utils.cpp	/^int gpt_disk_get_disk_info(const char *dev, struct gpt_disk *dsk)$/;"	f	typeref:typename:int
gpt_disk_get_pentry	gpt-utils/gpt-utils.cpp	/^uint8_t* gpt_disk_get_pentry(struct gpt_disk *disk,$/;"	f	typeref:typename:uint8_t *
gpt_disk_update_crc	gpt-utils/gpt-utils.cpp	/^int gpt_disk_update_crc(struct gpt_disk *disk)$/;"	f	typeref:typename:int
gpt_get_block_size	gpt-utils/gpt-utils.cpp	/^static uint32_t gpt_get_block_size(int fd)$/;"	f	typeref:typename:uint32_t	file:
gpt_get_header	gpt-utils/gpt-utils.cpp	/^static uint8_t* gpt_get_header(const char *partname, enum gpt_instance instance)$/;"	f	typeref:typename:uint8_t *	file:
gpt_get_pentry_arr	gpt-utils/gpt-utils.cpp	/^static uint8_t* gpt_get_pentry_arr(uint8_t *hdr, int fd)$/;"	f	typeref:typename:uint8_t *	file:
gpt_get_state	gpt-utils/gpt-utils.cpp	/^static int gpt_get_state(int fd, enum gpt_instance gpt, enum gpt_state *state)$/;"	f	typeref:typename:int	file:
gpt_instance	gpt-utils/gpt-utils.h	/^enum gpt_instance {$/;"	g
gpt_pentry_seek	gpt-utils/gpt-utils.cpp	/^static uint8_t *gpt_pentry_seek(const char *ptn_name,$/;"	f	typeref:typename:uint8_t *	file:
gpt_set_header	gpt-utils/gpt-utils.cpp	/^static int gpt_set_header(uint8_t *gpt_header, int fd,$/;"	f	typeref:typename:int	file:
gpt_set_pentry_arr	gpt-utils/gpt-utils.cpp	/^static int gpt_set_pentry_arr(uint8_t *hdr, int fd, uint8_t* arr)$/;"	f	typeref:typename:int	file:
gpt_set_state	gpt-utils/gpt-utils.cpp	/^static int gpt_set_state(int fd, enum gpt_instance gpt, enum gpt_state state)$/;"	f	typeref:typename:int	file:
gpt_state	gpt-utils/gpt-utils.cpp	/^enum gpt_state {$/;"	g	file:
gpt_utils_get_partition_map	gpt-utils/gpt-utils.cpp	/^int gpt_utils_get_partition_map(vector<string>& ptn_list,$/;"	f	typeref:typename:int
gpt_utils_is_ufs_device	gpt-utils/gpt-utils.cpp	/^int gpt_utils_is_ufs_device()$/;"	f	typeref:typename:int
gpt_utils_set_xbl_boot_partition	gpt-utils/gpt-utils.cpp	/^int gpt_utils_set_xbl_boot_partition(enum boot_chain chain)$/;"	f	typeref:typename:int
hdr	gpt-utils/gpt-utils.h	/^	uint8_t *hdr;$/;"	m	struct:gpt_disk	typeref:typename:uint8_t *
hdr_bak	gpt-utils/gpt-utils.h	/^	uint8_t *hdr_bak;$/;"	m	struct:gpt_disk	typeref:typename:uint8_t *
hdr_bak_crc	gpt-utils/gpt-utils.h	/^	uint32_t hdr_bak_crc;$/;"	m	struct:gpt_disk	typeref:typename:uint32_t
hdr_crc	gpt-utils/gpt-utils.h	/^	uint32_t hdr_crc;$/;"	m	struct:gpt_disk	typeref:typename:uint32_t
is_initialized	gpt-utils/gpt-utils.h	/^	uint32_t is_initialized;$/;"	m	struct:gpt_disk	typeref:typename:uint32_t
lun_list	gpt-utils/gpt-utils.cpp	/^     char lun_list[MAX_LUNS][PATH_MAX];$/;"	m	struct:update_data	typeref:typename:char[][]	file:
num_valid_entries	gpt-utils/gpt-utils.cpp	/^     uint32_t num_valid_entries;$/;"	m	struct:update_data	typeref:typename:uint32_t	file:
pentry_arr	gpt-utils/gpt-utils.h	/^	uint8_t *pentry_arr;$/;"	m	struct:gpt_disk	typeref:typename:uint8_t *
pentry_arr_bak	gpt-utils/gpt-utils.h	/^	uint8_t *pentry_arr_bak;$/;"	m	struct:gpt_disk	typeref:typename:uint8_t *
pentry_arr_bak_crc	gpt-utils/gpt-utils.h	/^	uint32_t pentry_arr_bak_crc;$/;"	m	struct:gpt_disk	typeref:typename:uint32_t
pentry_arr_crc	gpt-utils/gpt-utils.h	/^	uint32_t pentry_arr_crc;$/;"	m	struct:gpt_disk	typeref:typename:uint32_t
pentry_arr_size	gpt-utils/gpt-utils.h	/^	uint32_t pentry_arr_size;$/;"	m	struct:gpt_disk	typeref:typename:uint32_t
pentry_size	gpt-utils/gpt-utils.h	/^	uint32_t pentry_size;$/;"	m	struct:gpt_disk	typeref:typename:uint32_t
prepare_boot_update	gpt-utils/gpt-utils.cpp	/^int prepare_boot_update(enum boot_update_stage stage)$/;"	f	typeref:typename:int
prepare_partitions	gpt-utils/gpt-utils.cpp	/^int prepare_partitions(enum boot_update_stage stage, const char *dev_path)$/;"	f	typeref:typename:int
set_boot_lun	gpt-utils/gpt-utils.cpp	/^int set_boot_lun(char *sg_dev, uint8_t boot_lun_id)$/;"	f	typeref:typename:int
update_data	gpt-utils/gpt-utils.cpp	/^struct update_data {$/;"	s	file:
